export function writeClientsStructs(encoder: encoding.Encoder, store: StructStore, _sm: Map<number, number>): void;
export function readClientsStructRefs(decoder: decoding.Decoder): Map<number, (GCRef | ItemRef)[]>;
export function tryResumePendingDeleteReaders(transaction: Transaction, store: StructStore): void;
export function writeStructsFromTransaction(encoder: encoding.Encoder, transaction: Transaction): void;
export function readStructs(decoder: decoding.Decoder, transaction: Transaction, store: StructStore): void;
export function readUpdate(decoder: decoding.Decoder, ydoc: Doc, transactionOrigin?: any): void;
export function applyUpdate(ydoc: Doc, update: Uint8Array, transactionOrigin?: any): void;
export function writeStateAsUpdate(encoder: encoding.Encoder, doc: Doc, targetStateVector?: Map<number, number> | undefined): void;
export function encodeStateAsUpdate(doc: Doc, encodedTargetStateVector?: Uint8Array | undefined): Uint8Array;
export function readStateVector(decoder: decoding.Decoder): Map<number, number>;
export function decodeStateVector(decodedState: Uint8Array): Map<number, number>;
export function writeStateVector(encoder: encoding.Encoder, sv: Map<number, number>): encoding.Encoder;
export function writeDocumentStateVector(encoder: encoding.Encoder, doc: Doc): encoding.Encoder;
export function encodeStateVector(doc: Doc): Uint8Array;
import * as encoding from "lib0/encoding";
import { StructStore } from "./StructStore.js";
import * as decoding from "lib0/decoding";
import { GCRef } from "../structs/GC.js";
import { ItemRef } from "../structs/Item.js";
import { Transaction } from "./Transaction.js";
import { Doc } from "./Doc.js";
