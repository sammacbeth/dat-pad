export function rtop(request: IDBRequest<any>): Promise<any>;
export function openDB(name: string, initDB: (arg0: IDBDatabase) => any): Promise<IDBDatabase>;
export function deleteDB(name: string): Promise<any>;
export function createStores(db: IDBDatabase, definitions: (string[] | (string | IDBObjectStoreParameters | undefined)[])[]): void;
export function transact(db: IDBDatabase, stores: string[], access?: "readonly" | "readwrite" | undefined): IDBObjectStore[];
export function count(store: IDBObjectStore, range?: IDBKeyRange | undefined): Promise<number>;
export function get(store: IDBObjectStore, key: string | number | any[] | Date | ArrayBuffer): Promise<string | number | any[] | Date | ArrayBuffer>;
export function del(store: IDBObjectStore, key: string | number | any[] | Date | ArrayBuffer | IDBKeyRange): Promise<any>;
export function put(store: IDBObjectStore, item: string | number | boolean | Date | ArrayBuffer, key?: string | number | any[] | Date | ArrayBuffer | undefined): Promise<any>;
export function add(store: IDBObjectStore, item: string | number | boolean | Date | ArrayBuffer, key: string | number | any[] | Date | ArrayBuffer): Promise<any>;
export function addAutoKey(store: IDBObjectStore, item: string | number | Date | ArrayBuffer): Promise<number>;
export function getAll(store: IDBObjectStore, range?: IDBKeyRange | undefined): Promise<any[]>;
export function getAllKeys(store: IDBObjectStore, range?: IDBKeyRange | undefined): Promise<any[]>;
export function queryFirst(store: IDBObjectStore, query: IDBKeyRange | null, direction: IDBCursorDirection): Promise<any>;
export function getLastKey(store: IDBObjectStore): Promise<any>;
export function getFirstKey(store: IDBObjectStore): Promise<any>;
export function getAllKeysValues(store: IDBObjectStore, range?: IDBKeyRange | undefined): Promise<KeyValuePair[]>;
export function iterate(store: IDBObjectStore, keyrange: IDBKeyRange | null, f: (arg0: any, arg1: any) => boolean | void, direction?: IDBCursorDirection): Promise<void>;
export function iterateKeys(store: IDBObjectStore, keyrange: IDBKeyRange | null, f: (arg0: any) => boolean | void, direction?: IDBCursorDirection): Promise<void>;
export function getStore(t: IDBTransaction, store: string): IDBObjectStore;
export function createIDBKeyRangeBound(lower: any, upper: any, lowerOpen: boolean, upperOpen: boolean): IDBKeyRange;
export function createIDBKeyRangeUpperBound(upper: any, upperOpen: boolean): IDBKeyRange;
export function createIDBKeyRangeLowerBound(lower: any, lowerOpen: boolean): IDBKeyRange;
export type KeyValuePair = {
    /**
     * key
     */
    k: any;
    /**
     * Value
     */
    v: any;
};
//# sourceMappingURL=indexeddb.d.ts.map